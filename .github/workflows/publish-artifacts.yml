name: Publish Artifacts

on:
  push:
    branches:
      - "feat/prod-pipeline-output-hashes"

jobs:
  build-macos:
    runs-on: macos-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: npm ci

      - name: Build
        run: npm run electron:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: VirusTotal Scan for DMG
        run: |
          UPLOAD_URL=$(curl -s --location --url 'https://www.virustotal.com/vtapi/v2/file/scan/upload_url?apikey=${{ secrets.VIRUSTOTAL_API_KEY }}' | jq -r .upload_url)
          curl -s --url "$UPLOAD_URL" --form 'apikey=${{ secrets.VIRUSTOTAL_API_KEY }}' --form 'file=@release/protokol-manager.dmg' | jq -r .permalink

      - name: Package artifacts
        run: |
          mkdir artifact-macos
          mv release/protokol-manager.dmg artifact-macos/
          mv release/protokol-manager.dmg.blockmap artifact-macos/
          mv release/latest-mac.yml artifact-macos/

      - uses: actions/upload-artifact@v2
        name: Upload macos dmg artifact
        with:
          name: MacOS
          path: artifact-macos
          if-no-files-found: error

  build-linux:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 12.x ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: npm ci

      - name: Build
        run: npm run electron:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: VirusTotal Scan for AppImage
        run: |
          UPLOAD_URL=$(curl -s --location --url 'https://www.virustotal.com/vtapi/v2/file/scan/upload_url?apikey=${{ secrets.VIRUSTOTAL_API_KEY }}' | jq -r .upload_url)
          curl -s --url "$UPLOAD_URL" --form 'apikey=${{ secrets.VIRUSTOTAL_API_KEY }}' --form 'file=@release/protokol-manager_1.0.0-beta.2.AppImage' | jq -r .permalink

      - name: Package artifacts
        run: |
          mkdir artifact-linux
          mv release/protokol-manager.AppImage artifact-linux/
          mv release/latest-linux.yml artifact-linux/

      - uses: actions/upload-artifact@v2
        name: Upload Linux AppImage artifact
        with:
          name: Linux
          path: artifact-linux
          if-no-files-found: error


  build-windows:
    runs-on: windows-latest

    strategy:
      matrix:
        node-version: [ 12.x ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: npm ci

      - name: Build
        run: npm run electron:windows
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Package artifacts
        run: |
          mkdir artifact-win
          mv release/protokol-manager.exe artifact-win/

      - uses: actions/upload-artifact@v2
        name: Upload Win artifact
        with:
          name: Win
          path: artifact-win
          if-no-files-found: error


  create-release:
    runs-on: ubuntu-latest
    needs: [ build-macos, build-linux, windows-latest ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Determine the release version
        id: derive_release_version
        run: |
          RELEASE_VERSION=$(cat package.json | jq -r '.version')
          echo "::set-output name=version::${RELEASE_VERSION}"

      - name: Changelog version
        id: changelog_version
        run: |
          CHANGELOG_VERSION=$(echo '${{ steps.derive_release_version.outputs.version }}' | tr -d .)
          echo "::set-output name=version::${CHANGELOG_VERSION}"

      - uses: actions/download-artifact@v2
        with:
          name: MacOS
          path: ./macos-release-artifacts

      - uses: actions/download-artifact@v2
        with:
          name: Linux
          path: ./linux-release-artifacts

      - uses: actions/download-artifact@v2
        with:
          name: Win
          path: ./win-release-artifacts

      - name: Calculate Checksum for MacOS
        id: checksum_macos
        run: |
          CHECKSUM_MACOS=$(echo $(shasum -a 256 ./macos-release-artifacts/protokol-manager.dmg) | cut -d ' ' -f1)
          echo "::set-output name=checksum::${CHECKSUM_MACOS}"

      - name: Calculate Checksum for Linux
        id: checksum_linux
        run: |
          CHECKSUM_LINUX=$(echo $(shasum -a 256 ./linux-release-artifacts/protokol-manager.AppImage) | cut -d ' ' -f1)
          echo "::set-output name=checksum::${CHECKSUM_LINUX}"

      - name: Calculate Checksum for Win
        id: checksum_win
        run: |
          CHECKSUM_WIN=$(echo $(shasum -a 256 ./win-release-artifacts/protokol-manager.exe) | cut -d ' ' -f1)
          echo "::set-output name=checksum::${CHECKSUM_WIN}"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.derive_release_version.outputs.version }}
          release_name: Version ${{ steps.derive_release_version.outputs.version }}
          draft: true
          prerelease: false
          body: |
            ##### Changelog
            [${{ steps.derive_release_version.outputs.version }} changelog](https://github.com/protokol/protokol-manager/blob/feat/release-pipeline/CHANGELOG.md#v${{ steps.changelog_version.outputs.version }})

            ##### SHA256 Hashes
            | File                      | SHA256                                       |
            |---------------------------|----------------------------------------------|
            | protokol-manager.dmg      | ${{ steps.checksum_macos.outputs.checksum }} |
            | protokol-manager.AppImage | ${{ steps.checksum_linux.outputs.checksum }} |
            | protokol-manager.exe      | ${{ steps.checksum_win.outputs.checksum }}   |

      - name: Zip
        run: |
          zip -0 -r protokol-manager_macos_${{ steps.derive_release_version.outputs.version }}.zip macos-release-artifacts
          zip -0 -r protokol-manager_linux_appImage_${{ steps.derive_release_version.outputs.version }}.zip linux-release-artifacts
          zip -0 -r protokol-manager_win_${{ steps.derive_release_version.outputs.version }}.zip win-release-artifacts

      - name: Upload DMG Release Asset
        id: upload-release-asset-macos
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./protokol-manager_macos_${{ steps.derive_release_version.outputs.version }}.zip
          asset_name: protokol-manager_macos_${{ steps.derive_release_version.outputs.version }}.zip
          asset_content_type: application/zip

      - name: Upload AppImage Release Asset
        id: upload-release-asset-linux-appImage
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./protokol-manager_linux_appImage_${{ steps.derive_release_version.outputs.version }}.zip
          asset_name: protokol-manager_linux_appImage_${{ steps.derive_release_version.outputs.version }}.zip
          asset_content_type: application/zip

      - name: Upload Win Release Asset
        id: upload-release-asset-win
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./protokol-manager_win_${{ steps.derive_release_version.outputs.version }}.zip
          asset_name: protokol-manager_win_${{ steps.derive_release_version.outputs.version }}.zip
          asset_content_type: application/zip
